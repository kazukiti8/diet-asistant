ダイエット管理アプリ 要件定義書 (最終版案 Ver.1.0)
1. はじめに
1.1. ドキュメントの目的: 本ドキュメントは、開発する「ダイエット応援ノート（仮称）」の仕様を定義するものである。本アプリの開発に関わる全ての関係者（開発者自身を含む）が、アプリの目的、ターゲットユーザー、提供価値、機能要件、非機能要件、そしてデザインの方向性について共通の理解を持つことを目指す。
1.2. プロジェクトの背景・目的: 個個人的なダイエット目標達成を支援するためのWebアプリケーション開発。特に、継続の難しさやジムに通う時間がないといった現代的な課題を持つユーザーに対し、日々の記録、家での運動提案、そしてモチベーション維持の仕組みを通じて、楽しく効果的なダイエット活動をサポートする。
2. アプリ概要
2.1. アプリ名: (仮称) ダイエット応援ノート
2.2. アプリのコンセプト: 「3日坊主」にならずに「楽しく続けられる」ことを最重視した、家での運動メニュー提案に特化したパーソナルダイエット管理Webアプリケーション。
2.3. ターゲットユーザー:
* 20代の男女
* 仕事の時間が不規則で、生活リズムが一定でない
* ダイエット経験がない、または過去に挫折経験がある（初心者～初級者）
* ジムに通う時間や費用をかけずに、自宅で手軽に運動したい
* 日々の頑張りを可視化し、ポジティブなフィードバックでモチベーションを維持したい
2.4. 提供価値:
* 継続支援: シンプルな記録入力、リマインダー、褒め機能、ゲーミフィケーション要素により、日々の行動を習慣化し、ダイエットの継続を強力にサポートする。
* パーソナル運動提案: ユーザーの目標、体力レベル、利用可能な時間や器具に応じて、自宅で実践可能な効果的な運動メニューを提案する。
* 自己管理と達成感: 食事、運動、体重などの記録を通じて自身の状態を客観的に把握し、進捗グラフや達成状況の可視化により、達成感と自己効力感を育む。
* 知識提供と安心感: ダイエットに関する基本的な知識やアドバイスを提供し、初心者が抱える疑問や不安を解消する。
3. 機能要件
3.1. 主要機能一覧（優先度別）
* MVP（Minimum Viable Product: 顧客に価値を提供できる最小限の製品）（優先度：高）
* ユーザー登録・ログイン機能
* 目標設定機能
* 食事記録機能
* 運動記録機能
* 体重記録機能（体脂肪率、ウエスト、気分、睡眠、体調の任意記録含む）
* カロリー計算機能
* PFCバランス (タンパク質・脂質・炭水化物のバランス) 表示機能（目標設定含む）
* 進捗グラフ機能（体重グラフ基本、目標達成率表示、PFCバランス等）
* アドバイス機能（基本知識提供、モチベーション維持の声かけ、パーソナライズドアドバイスの基礎）
* 家での運動メニュー提案機能（条件入力、テキストベースメニュー表示、簡単記録連携）
* リマインダー機能（食事、運動、体重など各種設定可能）
* プッシュ通知機能（リマインダー、成果称賛、モチベーション維持メッセージなど各種設定可能）
* 褒める機能（記録・目標達成・継続に応じたメッセージ表示、通知、達成バッジ表示）
* カレンダー表示（記録達成度）
* 週ごとのミニゴール設定機能
* データバックアップ/リストア機能
* UI/UX（ユーザーインターフェース/ユーザーエクスペリエンス：アプリの使いやすさや見た目）：モックアップのデザインをベースとした、明るくポジティブで直感的なインターフェース。
* 優先度：中
* 食事記録：マイメニュー機能、テンプレート記録機能
* 運動記録：Fitbit API (Fitbitのデータと連携するための仕組み) 等外部サービス連携
* 進捗グラフ：種類追加（運動時間など）、過去の自分との詳細比較機能
* ミッション・チャレンジ機能
* アドバイス・コラム機能の拡充（記事一覧、カテゴリ別、検索、お気に入り）
* 応援キャラクター設定の充実（タイプ選択、メッセージ頻度、カスタムメッセージ）
* 優先度：低
* 褒める機能（アプリ内アイテム等の演出）
* 目標再設定の自動提案機能
* 「最近の変化を感じますか？」の問いかけ機能（体重記録画面に統合済）
* 応援キャラクターのアバター (利用者の分身となるキャラクター) 着せ替えアイテム
3.2. 各機能詳細仕様
(ここには、以前作成した「3.2. 各機能詳細仕様」のセクションの内容（3.2.1～3.2.12）をそのまま挿入します。モックアップで具体化されたUI要素（例：ホーム画面のPFC目標設定ボタン、記録画面のマイメニュー/テンプレートボタンなど）も反映されていることを確認。)
Generated code
**（補足）モックアップで新たに追加・具体化された機能要素:**
    *   **ホーム画面:**
        *   PFCバランス目標設定への導線ボタン
        *   カレンダー形式での記録達成度表示
        *   週ごとのミニゴール表示と進捗
        *   ミッション・チャレンジの進捗表示
        *   応援キャラクターからのメッセージ表示エリア
        *   記録がない場合の空状態表示
        *   達成バッジ表示（モーダル）
        *   モチベーションポップアップ表示
    *   **食事記録画面:**
        *   マイメニュー選択モーダル
        *   テンプレート記録選択モーダル
    *   **体重記録画面:**
        *   体脂肪率、ウエスト、気分、睡眠、体調の記録項目
        *   「最近の変化を感じますか？」の選択項目
    *   **アドバイス・コラム画面:**
        *   カテゴリタブ、おすすめ記事、今日の豆知識、最新記事、記事検索、パーソナライズドアドバイス表示
        *   記事詳細表示モーダル（または別ページ）
    *   **運動メニュー提案画面:**
        *   ユーザーの体力レベル、運動時間、鍛えたい部位、利用器具の選択UI
        *   提案された運動メニューの詳細リスト表示（回数、時間、消費カロリー、注意点など）
        *   メニュー開始ボタン、お気に入り登録ボタン
    *   **目標設定画面（初期・編集共通）:**
        *   現在の目標状況の表示と調整UI
        *   ステップ形式のUI（ユーザー登録時）
        *   ダイエット目的のチェックボックス選択
        *   計算結果（目標摂取カロリー、BMIなど）の表示
    *   **設定画面:**
        *   プロフィール編集、目標設定、リマインダー設定、通知設定、データバックアップ/リストア、アドバイス・コラムへの導線
        *   応援キャラクター設定（タイプ、頻度、カスタムメッセージ）
        *   データ同期設定（トグルスイッチ）
        *   データ削除ボタン
    *   **データバックアップ画面:**
        *   データエクスポート（プレビュー機能含む）
        *   データインポート（ファイル選択、ドラッグ＆ドロップ、上書き確認モーダル）
        *   バックアップ履歴表示
        *   自動バックアップ設定（頻度、保持期間）
    *   **ログイン画面:**
        *   ユーザー名、パスワード入力、ログイン状態保持、パスワード忘れリンク
        *   新規登録への導線
        *   エラーメッセージモーダル
    *   **ユーザー登録画面:**
        *   ステップ形式UI（アカウント情報→プロフィール情報→目標設定）
        *   各ステップでの入力フォームとバリデーション（想定）
        *   登録完了モーダル
Use code with caution.
4. 非機能要件
4.1. 対応プラットフォーム: Webブラウザ (PC) (理由: MVPでは開発リソースを集中し、迅速なリリースを目指すため)
4.2. データ管理:
* ブラウザのローカルストレージ (LocalStorageやIndexedDBなど、ブラウザ内のデータ保存領域) にユーザーデータを保存する。(理由: MVPではサーバー開発コストを抑え、オフライン利用を容易にするため)
* ログイン機能（ユーザー名/ニックネーム、パスワード）を設け、ユーザーデータを保護・識別する。
* データのバックアップ（エクスポート：JSON形式）/リストア（インポート）機能を提供し、ローカルストレージのデータ消失リスクをユーザー自身で軽減できるようにする。
4.3. セキュリティ:
* パスワードはクライアントサイドでハッシュ化 (元に戻せないように不可逆暗号化：例 Web Crypto API利用) してローカルストレージに保存し、ログイン認証時に比較する。(理由: 生パスワード保存を避け、漏洩時のリスクを低減するため)
* （強く推奨）アプリ配信はHTTPS (SSL/TLSによる暗号化通信) を利用する。(理由: 通信の盗聴や改ざんを防止するため)
* 個人情報の取り扱いについては、関連法令（個人情報保護法など）を遵守する。
4.4. オフライン対応: Service Worker (ウェブページとは別にバックグラウンドで動作するスクリプト) などの技術を活用し、一度アプリを読み込んだ後は、ほぼ全ての記録・閲覧機能をオフライン環境でも利用可能にすることを目指す。(理由: 利用場所を選ばない利便性向上のため)
4.5. パフォーマンス・可用性:
* 画面遷移やデータ処理は、ユーザーがストレスを感じない軽快な動作（サクサク感）を目指す（例：主要操作の応答は1秒以内、複雑な処理でも3秒以内など具体的な目標値を設定することも検討）。
* ローカルストレージのデータ量が増加しても、検索や表示のパフォーマンスが著しく低下しないよう、効率的なデータ構造やクエリを考慮する。
* 予期せぬエラー（入力エラー、データ保存失敗など）が発生した場合でも、アプリがクラッシュ (強制終了) せず、ユーザーに状況を分かりやすく伝え、可能な限り操作を継続できるようにする。
4.6. UI/UX:
* ターゲットユーザー（20代男女、ダイエット初心者）がマニュアルなしでも直感的に操作を理解でき、快適に利用できるインターフェースを提供する。
* モックアップで示された、グラデーションやアイコンを効果的に使用した、明るくポジティブで、モチベーションを高めるデザインテーマを基本とする。
* アプリ内でのボタン配置、配色、フォントスタイル、情報提示の仕方など、操作方法やデザインに一貫性を持たせる。
4.7. 拡張性・保守性:
* 採用技術: フロントエンドはVue.jsフレームワークとTailwind CSSを基本とする。
* 将来的な機能追加（優先度：中、低の機能など）や仕様変更に対応しやすいよう、コンポーネントベースの設計、適切なモジュール分割、DRY (Don't Repeat Yourself) 原則などを意識したコード記述を心がける。
* コードの可読性を高め（コメント、命名規則など）、他の開発者（将来の自分を含む）が理解しやすく、保守しやすい状態を目指す。
* 主要な機能については、ある程度のテスト（手動テスト、およびVue Test Utilsなどを用いたユニットテスト/コンポーネントテストも検討）を実施し、品質を担保する。
* バージョン管理システムとしてGitを利用する。
4.8. アクセシビリティ (より多くの人が利用しやすくするための配慮) :
* 基本的な視認性（例: WCAG (Web Content Accessibility Guidelines) のコントラスト比基準AAレベル以上を目指すなど）を重視する。
* セマンティックなHTMLマークアップを心がけ、スクリーンリーダーでの読み上げに対応しやすくする。
* （キーボードのみでの主要操作、文字サイズ変更機能はMVPでは必須としないが、将来的な改善項目として意識し、可能な範囲で配慮する）
5. 収益化モデル
5.1. 現時点では検討しない。
6. 今後の課題・検討事項（開発フェーズで具体化）
6.1. 詳細な画面遷移図の作成: モックアップを元に、全画面の正確な遷移フローを定義する。
6.2. エラー処理の詳細設計: 各機能における具体的なエラーケースと、それに対するユーザーへの通知方法、復旧手段などを定義する。
6.3. 空状態の表示設計: 各リストやグラフでデータが存在しない場合の具体的な表示内容と、次のアクションを促すメッセージを定義する。
6.4. 実際のグラフ描画ライブラリの選定と実装: (例: Chart.js, ApexCharts for Vueなど)
6.5. 運動メニュー提案ロジックの具体化: ユーザー入力条件と提案メニューの紐付けルールの詳細化。
6.6. 利用規約・プライバシーポリシーの作成。